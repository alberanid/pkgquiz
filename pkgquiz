#!/usr/bin/python3

import apt
import random
import re

class Quiz:
    def __init__(self, only_installed=False, show_answers=False, hard=False):
        print("Collecting package information...")
        cache = apt.Cache()
        re_apt_tags = re.compile(r",\s+")

        self.descs = {}
        self.tags = {}
        for pkg in cache:
            if only_installed and not pkg.is_installed: continue
            ver = pkg.candidate
            if ver is None: continue
            tags = set(re_apt_tags.split(ver.record.get("Tag", "")))
            if "role::program" not in tags: continue
            self.descs[pkg.shortname] = ver.summary
            self.tags[pkg.shortname] = tags

        self.names = list(self.descs.keys())

        self.count_correct = 0
        self.count_incorrect = 0
        self.show_answers = show_answers
        self.hard = hard

    def pick_name(self):
        cand_idx = random.randint(0, len(self.names))
        return self.names.pop(cand_idx)

    def pick_descs(self, name, count=3):
        if len(self.names) < count: return None

        if self.hard:
            other_names = self.sample_hard(name, count - 1)
        else:
            other_names = random.sample(self.names, count - 1)
        cand_descs = [self.descs[name]] + [self.descs[x] for x in other_names]
        random.shuffle(cand_descs)
        return cand_descs

    def sample_hard(self, name, count):
        """
        Sample package names, preferring those that have tags similar to those
        of `name`
        """
        # Score all choices by how many tags are in common
        scored_names = []
        selected_tags = self.tags[name]
        for cand in self.names:
            score = len(selected_tags.intersection(self.tags[cand]))
            scored_names.append((score, cand))
        scored_names.sort(key=lambda x:-x[0])

        # Choose
        poolsize = min(len(self.names), 10)
        seen = set()
        while len(seen) < count:
            seen.add(round(random.triangular(0, poolsize, 0)))
        return [scored_names[x][1] for x in seen]

    def run_once(self):
        name = self.pick_name()
        print()
        print("What is the description for package {}?".format(name))

        cand_descs = self.pick_descs(name)
        for idx, d in enumerate(cand_descs, 1):
            print("  {}) {}".format(idx, d))

        while True:
            text = input("Enter the number (q to quit): ")
            if text.strip() == "q": return False

            try:
                useranswer = int(text)
            except ValueError:
                continue
            if useranswer - 1 not in range(len(cand_descs)): continue

            if cand_descs[useranswer - 1] == self.descs[name]:
                print("Correct!")
                self.count_correct += 1
            else:
                print("Incorrect!")
                if self.show_answers:
                    print("The correct answer was: {}".format(self.descs[name]))
                self.count_incorrect += 1

            return True

def parseCmdlineArgs():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--installed', action='store_true',
                        help="only quiz installed packages")
    parser.add_argument('-a', '--answers', action='store_true',
                        help="show the correct answers in case you missed it")
    parser.add_argument('--hard', action='store_true',
                        help="choose other descriptions from similar packages")
    args = parser.parse_args()
    return args

if __name__ == '__main__':
    args=parseCmdlineArgs()
    quiz = Quiz(only_installed=args.installed, show_answers=args.answers, hard=args.hard)
    while True:
        cont = quiz.run_once()
        if not cont: break

    print()
    if quiz.count_incorrect == 0:
        if quiz.count_correct == 0:
            pass
        else:
            print("You got all {} of them right! *hug*".format(quiz.count_correct))
    else:
        if quiz.count_correct == 0:
            print("You got none of the {} of them right *hug*".format(quiz.count_incorrect))
        else:
            print("You got {}/{} of them right".format(quiz.count_correct, quiz.count_correct + quiz.count_incorrect))

